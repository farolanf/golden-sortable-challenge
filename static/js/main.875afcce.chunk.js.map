{"version":3,"sources":["utils.js","Table.js","data/sample.csv","App.js","serviceWorker.js","index.js"],"names":["isCSV","data","lines","split","length","quotes","find","delimiter","quote","replace","pattern","concat","re","RegExp","m1","match","m2","_isCSV","ColumnHeader","_ref","label","active","sortDir","props","Object","objectWithoutProperties","react_default","a","createElement","assign","className","cn","data-uk-icon","hidden","Table","_ref2","i","list","_useState","useState","_useState2","slicedToArray","sortCol","setSortCol","_useState3","_useState4","setSortDir","headers","keys","colName","sort","b","_b","String","localeCompare","map","Table_ColumnHeader","key","onClick","col","row","r","values","sample","App","sampleCSV","setData","setList","_useState5","_useState6","setDelimiter","_useState7","_useState8","setQuote","_useState9","_useState10","error","setError","useEffect","parseData","JSON","parse","jsonErr","Error","csvjson","toObject","comma","space","tab","single","double","parseCSV","err","rows","placeholder","value","onChange","e","target","data-uk-grid","type","stringify","sampleJSON","src_Table_0","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.875afcce.chunk.js","sourcesContent":["export const isCSV = data => {\n  const lines = data.split('\\n')\n  if (lines.length < 2) return false\n  \n  const delimiters = [' ', ',', '\\t']\n  const quotes = [\"'\", '\"']\n  \n  return delimiters.find(delimiter => {\n    return quotes.find(quote => _isCSV(lines, delimiter, quote))\n  })\n\n  function _isCSV (lines, delimiter, quote) {\n    delimiter = delimiter.replace(/\\//g, '\\\\\\\\')\n    const pattern = `(?:(?:(${quote}[^${quote}]*?${quote})|(\\\\S+))(?:${delimiter}+|$))`\n    const re = new RegExp(pattern, 'g')\n    const m1 = lines[0].match(re)\n    const m2 = lines[1].match(re)\n    return m1 && m2 && m1.length === m2.length\n  }\n}\n","import React, { useState, useEffect } from 'react'\nimport cn from 'classnames'\n\nimport './Table.css'\n\nconst ColumnHeader = ({ label, active, sortDir, ...props }) => (\n  <th className='cursor-pointer' {...props}>\n    <span className={cn(active && 'uk-text-emphasis')}>{label}</span>\n    <span className={cn('sort-icons', !active && 'invisible')}>\n      <span data-uk-icon='triangle-up' hidden={sortDir !== 'asc'} />\n      <span data-uk-icon='triangle-down' hidden={sortDir !== 'desc'} />\n    </span>\n  </th>\n)\n\nconst Table = ({ list }) => {\n  const [sortCol, setSortCol] = useState(0)\n  const [sortDir, setSortDir] = useState('asc')\n\n  const headers = list && list.length && Object.keys(list[0])\n  \n  const getColName = i => Object.keys(list[0] || {})[i]\n\n  const handleChangeSort = col => () => {\n    setSortCol(col)\n    if (col === sortCol) {\n      setSortDir(sortDir === 'asc' ? 'desc' : 'asc')\n    } else {\n      setSortDir('asc')\n    }\n  }\n\n  const colName = getColName(sortCol)\n  list.sort((a, b) => {\n    const _a = sortDir === 'asc' ? a : b\n    const _b = sortDir === 'asc' ? b : a\n    return String(_a[colName]).localeCompare(_b[colName])\n  })\n\n  return (\n    <div className='uk-overflow-auto'>\n      <table className='uk-table uk-table-divider uk-table-hover'>\n        <thead>\n          <tr>\n            {(headers || []).map((label, i) => (\n              <ColumnHeader key={label} label={label} active={i === sortCol} sortDir={sortDir} onClick={handleChangeSort(i)}>\n                {label}\n              </ColumnHeader>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {(list || []).map((row, r) => (\n            <tr key={r}>\n              {Object.values(row).map((col, i) => (\n                <td key={i}>{col}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Table","export default \"Company Name\\t1/1/2019\\t1/2/2019\\t1/3/2019\\t1/4/2019\\t1/5/2019\\t1/6/2019\\t1/7/2019\\nC1\\t500\\t600\\t700\\t800\\t901\\t1001\\t999\\nC2\\t404\\t506\\t634\\t456\\t787\\t235\\t433\\nC3\\t1001\\t1231\\t1341\\t999\\t823\\t787\\t1321\\nC4\\t781\\t888\\t567\\t982\\t687\\t452\\t154\\nC5\\t143\\t342\\t143\\t451\\t871\\t341\\t485\\nC6\\t241\\t253\\t560\\t141\\t673\\t351\\t361\\nC7\\t897\\t971\\t691\\t813\\t991\\t941\\t934\\n\"","import React, { useState, useEffect } from 'react';\nimport csvjson from 'csvjson'\nimport { isCSV } from './utils'\n\nimport Table from './Table'\n\n// eslint-disable-next-line\nimport sampleCSV from '!raw-loader!./data/sample.csv'\nimport sampleJSON from './data/sample.json'\n\nconst App = () => {\n  const [data, setData] = useState(sampleCSV)\n  const [list, setList] = useState([])\n  const [delimiter, setDelimiter] = useState('tab')\n  const [quote, setQuote] = useState('double')\n  const [error, setError] = useState('')\n\n  useEffect(() => {\n    setError('')\n    if (data) {\n      const list = parseData(data)\n      setList(list || [])\n    }\n  }, [data])\n\n  const parseCSV = data => {\n    const delimiters = { comma: ',', space: /\\s+/, tab: /\\t+/ }\n    const quotes = { single: \"'\", double: '\"' }\n    return csvjson.toObject(data, { \n      delimiter: delimiters[delimiter], \n      quote: quotes[quote],\n    })\n  }\n\n  const parseData = data => {\n    try {\n      return JSON.parse(data)\n    }\n    catch (jsonErr) {\n      try {\n        if (!isCSV(data)) throw new Error('Not a csv')\n        return parseCSV(data)\n      }\n      catch (err) {\n        setError('Data not in a JSON or CSV format')\n      }\n    }\n  }\n  \n  const handleChangeDelimiter = e => setDelimiter(e.target.value)\n\n  const handleChangeQuote = e => setQuote(e.target.value)\n\n  const handleChange = e => {\n    setData(e.target.value)\n  }\n\n  const handlePasteSampleJSON = () => {\n    setData(JSON.stringify(sampleJSON, null, 2))\n  }\n  \n  const handlePasteSampleCSV = () => {\n    setData(sampleCSV)\n  }\n  \n  return (\n    <div className='uk-container'>\n      <article className='uk-section'>\n        <h2>Sortable Challenge</h2>\n\n        <h3>Input</h3>\n        <form className='uk-form-stacked'>\n       \n          <div className='uk-margin'>\n            <label className='uk-form-label'>Data</label>\n            <div className='uk-form-controls'>\n              <textarea className='uk-textarea' rows='8' placeholder='Paste JSON or CSV here...' value={data} onChange={handleChange} />\n              {error && <div className='uk-text-danger uk-text-small mt-1'>{error}</div>}\n              {!error && <div className='uk-text-muted uk-text-small mt-1'>Specify data in JSON or CSV format</div>}\n            </div>\n          </div>\n\n          <div data-uk-grid>\n            <div>\n              <label className='uk-form-label'>Delimiter</label>\n              <div className='uk-form-controls'>\n                <select className='uk-select' value={delimiter} onChange={handleChangeDelimiter}>\n                  <option value='comma'>Comma</option>\n                  <option value='space'>Space</option>\n                  <option value='tab'>Tab</option>\n                </select>\n              </div>\n            </div>\n            <div>\n              <label className='uk-form-label'>Quote</label>\n              <div className='uk-form-controls'>\n                <select className='uk-select' value={quote} onChange={handleChangeQuote}>\n                  <option value=\"single\">Single</option>\n                  <option value='double'>Double</option>\n                </select>\n              </div>\n            </div>\n          </div>\n\n        </form>\n\n        <div className='uk-margin'>\n          <button className='uk-button uk-button-default' type='button' onClick={handlePasteSampleJSON}>\n            Paste sample JSON\n          </button>\n          <button className='uk-button uk-button-default ml-1' type='button' onClick={handlePasteSampleCSV}>\n            Paste sample CSV\n          </button>\n        </div>\n\n        <h3>Sortable List</h3>\n        <Table list={list} />\n\n        <h3>Raw List</h3>\n        <pre>{JSON.stringify(list, null, 2)}</pre>\n      </article>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}